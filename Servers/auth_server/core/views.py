# -*- coding: utf-8 -*-
from __future__ import unicode_literals
import json

from django.conf import settings
from django.contrib.auth import get_user_model
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse, HttpResponseBadRequest
from django.shortcuts import render

from ezi.views import ModelCrudApiView, ApiView

from Servers.common.auth_core.models import AuthUser
from Servers.common import utils as common_utils

class AuthUserApiView(ModelCrudApiView):

    model = AuthUser

    allowed_methods = ("GET", "PUT")

    def create_object(self):
        """
        Override of ezi.views.ModelCrudApiView.create_object. This method takes
        input from self.request.PUT and creates an instance of self.model from
        that input.

        This override takes the auth_user input and sends it to a call to
        AuthUser.objects.create_from_json().

        The data in self.request.PUT is expected to have a key named auth_user
        that contains the json for the user to be created or updated. This json
        must be in the format generated by AuthUser.json().

        Returns the model object created from the json representing the user.
        """
        PUT = common_utils.get_PUT_data(self.request)
        auth_user_data = json.loads(PUT["auth_user"])
        return self.model.objects.create_or_update_from_json(auth_user_data)

@login_required
def get_csrf_token(request):
    """
    API endpoint for client servers to retrieve a csrftoken.
    """
    if not request.method == "GET": return HttpResponseBadRequest("That is not allowed.")
    return HttpResponse("Here's the csrf token!")
